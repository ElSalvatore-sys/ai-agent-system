version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: llm-postgres
    environment:
      POSTGRES_DB: llm_optimization
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: llm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: llm-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    # GPU support - uncomment if you have NVIDIA GPU
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: llm-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/llm_optimization
      - REDIS_URL=redis://redis:6379
      - OLLAMA_HOST=http://ollama:11434
      - CORS_ORIGINS=["http://localhost:7000","http://127.0.0.1:7000"]
      - SECRET_KEY=dev-secret-key-change-in-production
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
      - COST_TRACKING_ENABLED=true
      - MONTHLY_COST_LIMIT=100.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: llm-celery-worker
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/llm_optimization
      - REDIS_URL=redis://redis:6379
      - OLLAMA_HOST=http://ollama:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.services.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: llm-celery-beat
    volumes:
      - ./backend:/app
      - celery_beat_data:/var/lib/celery
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/llm_optimization
      - REDIS_URL=redis://redis:6379
      - OLLAMA_HOST=http://ollama:11434
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.services.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: llm-frontend
    ports:
      - "7000:7000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped

  # Simple Monitoring Dashboard (Lightweight alternative to Grafana)
  monitoring:
    image: prom/prometheus:latest
    container_name: llm-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Task Monitor (Flower for Celery)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: llm-flower
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    command: celery -A app.services.celery_app flower --port=5555 --basic_auth=admin:admin123
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  default:
    name: llm-network
    driver: bridge