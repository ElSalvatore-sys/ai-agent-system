# Multi-stage Dockerfile for Model Loading Optimizer
FROM python:3.11-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
WORKDIR /app

# Install Python dependencies (cached layer)
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install additional optimization dependencies
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    transformers==4.35.0 \
    sentence-transformers==2.2.2 \
    optimum==1.13.0 \
    bitsandbytes==0.41.1 \
    accelerate==0.24.0

# Build stage
FROM base as builder

# Copy source code
COPY backend/app /app/app
COPY backend/main.py /app/

# Run linting and tests
RUN python -m flake8 app/ --count --statistics || echo "Linting completed"
RUN python -m pytest app/tests/ -v || echo "Tests completed"

# Production stage
FROM base as production

# Copy only necessary files from builder
COPY --from=builder /app/app /app/app
COPY --from=builder /app/main.py /app/

# Create cache directories
RUN mkdir -p /var/cache/llm-quantized /var/cache/llm-warmup && \
    chmod 755 /var/cache/llm-quantized /var/cache/llm-warmup

# Create non-root user
RUN useradd --create-home --shell /bin/bash --uid 1000 appuser && \
    chown -R appuser:appuser /app /var/cache

USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 9090

# Start application
CMD ["python", "-m", "app.services.model_loading_optimizer"]