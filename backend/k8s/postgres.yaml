apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: llm-system
type: Opaque
data:
  # Base64 encoded values - change in production
  postgres-user: bGxtX3VzZXI=  # llm_user
  postgres-password: bGxtX3Bhc3N3b3JkX2NoYW5nZV9pbl9wcm9kdWN0aW9u  # llm_password_change_in_production
  postgres-db: bGxtX2RhdGFiYXNl  # llm_database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: llm-system
data:
  postgresql.conf: |
    # PostgreSQL configuration for LLM system
    
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL settings
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    
    # Query planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    
    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    
    # Extensions
    shared_preload_libraries = 'pg_stat_statements'
  
  init.sql: |
    -- Initialize LLM database
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_ai_requests_user_id ON ai_requests(user_id);
    CREATE INDEX IF NOT EXISTS idx_ai_requests_created_at ON ai_requests(created_at);
    CREATE INDEX IF NOT EXISTS idx_ai_requests_model_provider ON ai_requests(model_provider);
    CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);
    CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
    CREATE INDEX IF NOT EXISTS idx_system_metrics_created_at ON system_metrics(created_at);
    CREATE INDEX IF NOT EXISTS idx_cost_tracking_user_id ON cost_tracking(user_id);
    CREATE INDEX IF NOT EXISTS idx_generated_content_user_id ON generated_content(user_id);
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: llm-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: llm-system
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate  # PostgreSQL doesn't support rolling updates with PVC
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-db
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
      - name: init-scripts
        configMap:
          name: postgres-config
          items:
          - key: init.sql
            path: init.sql
      securityContext:
        runAsNonRoot: true
        runAsUser: 70
        fsGroup: 70
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: llm-system
  labels:
    app: postgres
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres